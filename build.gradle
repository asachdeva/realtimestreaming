plugins {
    id "org.flywaydb.flyway" version "4.0.2"
}

apply plugin: 'scala'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'eclipse'

group 'com.advisory.dpe'
version '1.0'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://repo.spray.io" }
    maven { url "https://dl.bintray.com/spark-jobserver/maven"}
}

ext {
    camelVersion = '2.17.1'
    hapiVersion = '2.2'
    gradleVersion = '2.13'
    groovyVersion = '2.4.3'
    kafkaVersion = '0.8.2.2'
    logbackVersion = '1.1.6'
    scalaTestVersion = '2.2.6'
    scalaVersion = '2.10'
    scalaLoggingVersion = '1.1.0'
    slf4jVersion = '1.7.21'
    sparkVersion = '1.6.1'
    typesafeConfigVersion = '1.2.1'
    jsonVersion = '20160212'
    junitVersion = '4.12'
    h2Version = '1.4.192'
}

configurations.all {
    exclude module: 'slf4j-log4j12'
}

dependencies {
    compile 'net.sf.opencsv:opencsv:2.3'
    compile "org.json:json:${jsonVersion}"

    compile "io.spray:spray-json_${scalaVersion}:1.3.2"
    compile "io.spray:spray-httpx_${scalaVersion}:1.3.2"

    compile "org.apache.camel:camel-core:${camelVersion}"
    compile "org.apache.camel:camel-kafka:${camelVersion}"
    compile "org.apache.camel:camel-jackson:${camelVersion}"
    compile "org.apache.camel:camel-scala:${camelVersion}"
    compile "org.apache.camel:camel-hdfs2:${camelVersion}"
    compile "org.apache.camel:camel-stream:${camelVersion}"
    compile "org.apache.camel:camel-jdbc:${camelVersion}"
    compile "org.apache.camel:camel-rabbitmq:${camelVersion}"
    compile "org.apache.camel:camel-hl7:${camelVersion}"
    compile "org.apache.camel:camel-mllp:${camelVersion}"
    compile "org.apache.camel:camel-csv:${camelVersion}"
    compile "org.apache.camel:camel-metrics:${camelVersion}"

    compile "com.typesafe:config:${typesafeConfigVersion}"
    compile "com.typesafe:scalalogging-slf4j_${scalaVersion}:${scalaLoggingVersion}"

    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "ch.qos.logback:logback-classic:${logbackVersion}"
    compile "ch.qos.logback:logback-core:${logbackVersion}"

    compile ("org.apache.spark:spark-streaming_${scalaVersion}:${sparkVersion}") {
        exclude module: 'jackson-module-scala_2.10'
    }

    compile "org.apache.spark:spark-streaming_${scalaVersion}:${sparkVersion}"
    compile "org.apache.spark:spark-streaming-kafka_${scalaVersion}:${sparkVersion}"
    compile "org.apache.spark:spark-core_${scalaVersion}:${sparkVersion}"
    compile "org.apache.spark:spark-sql_${scalaVersion}:${sparkVersion}"
    compile "com.databricks:spark-csv_${scalaVersion}:1.4.0"
    compile "spark.jobserver:job-server_2.10:0.6.2"
    compile "spark.jobserver:job-server-api_2.10:0.6.2"
    compile "spark.jobserver:job-server-extras_2.10:0.6.2"

    compile "com.fasterxml.jackson.module:jackson-module-scala_${scalaVersion}:2.7.2"
    compile 'xerces:xercesImpl:2.11.0'

    compile 'org.apache.zookeeper:zookeeper:3.4.8'

    compile(group: 'org.apache.kafka', name: "kafka_${scalaVersion}", version: "${kafkaVersion}") {
        exclude(module: 'jmxri')
        exclude(module: 'jmxtools')
        exclude(module: 'jms')
        exclude(module: 'junit')
    }

    compile 'org.postgresql:postgresql:9.4-1200-jdbc41'
    compile "org.codehaus.groovy:groovy:${groovyVersion}"

    compile "org.scala-lang:scala-compiler:${scalaVersion}"
    compile "org.scala-lang:scala-library:${scalaVersion}"

    compile "ca.uhn.hapi:hapi-base:${hapiVersion}"
    compile "ca.uhn.hapi:hapi-structures-v23:${hapiVersion}"
    compile "ca.uhn.hapi:hapi-structures-v25:${hapiVersion}"
    compile "com.h2database:h2:${h2Version}"

    testCompile "org.apache.camel:camel-core:${camelVersion}"
    testCompile "org.apache.camel:camel-scala:${camelVersion}"
    testCompile "org.apache.camel:camel-test-blueprint:${camelVersion}"
    testCompile "org.apache.camel:camel-hdfs2:${camelVersion}"
    testCompile "org.apache.camel:camel-stream:${camelVersion}"
    testCompile "org.apache.camel:camel-jdbc:${camelVersion}"
    testCompile "org.apache.camel:camel-rabbitmq:${camelVersion}"
    testCompile "org.apache.camel:camel-hl7:${camelVersion}"
    testCompile "org.apache.camel:camel-mllp:${camelVersion}"
    testCompile "org.apache.camel:camel-test:${camelVersion}"
    testCompile "org.scalatest:scalatest_${scalaVersion}:${scalaTestVersion}"
    testCompile "junit:junit:${junitVersion}"
    testCompile "org.apache.curator:curator-test:2.6.0"
    testCompile(group: 'org.apache.kafka', name: "kafka_${scalaVersion}", version: "${kafkaVersion}") {
        exclude(module: 'jmxri')
        exclude(module: 'jmxtools')
        exclude(module: 'jms')
        exclude(module: 'junit')
    }
    testCompile "com.h2database:h2:${h2Version}"

    runtime "org.apache.camel:camel-core:${camelVersion}"
    runtime "org.apache.camel:camel-kafka:${camelVersion}"
    runtime "org.apache.camel:camel-jackson:${camelVersion}"
    runtime "org.apache.camel:camel-scala:${camelVersion}"
    runtime "org.apache.camel:camel-hdfs2:${camelVersion}"
    runtime "org.apache.camel:camel-stream:${camelVersion}"
    runtime "org.apache.camel:camel-jdbc:${camelVersion}"
    runtime "org.apache.camel:camel-rabbitmq:${camelVersion}"
    runtime "org.apache.camel:camel-hl7:${camelVersion}"
    runtime "org.apache.camel:camel-mllp:${camelVersion}"
    runtime "org.apache.camel:camel-csv:${camelVersion}"
    runtime "org.apache.camel:camel-metrics:${camelVersion}"

    runtime "ca.uhn.hapi:hapi-base:${hapiVersion}"
    runtime "ca.uhn.hapi:hapi-structures-v23:${hapiVersion}"
    runtime "com.typesafe:config:${typesafeConfigVersion}"
    runtime "io.spray:spray-json_${scalaVersion}:1.3.2"
    runtime "io.spray:spray-httpx_${scalaVersion}:1.3.2"
    runtime "org.apache.spark:spark-streaming-kafka_${scalaVersion}:${sparkVersion}"
    runtime "org.scala-lang:scala-compiler:${scalaVersion}"
    runtime "org.scala-lang:scala-library:${scalaVersion}"
    runtime 'xerces:xercesImpl:2.11.0'
    runtime (group: 'org.apache.kafka', name: "kafka_${scalaVersion}", version: "${kafkaVersion}", classifier: "test") {
        exclude(module: 'jmxri')
        exclude(module: 'jmxtools')
        exclude(module: 'jms')
        exclude(module: 'junit')
    }
    runtime "com.h2database:h2:${h2Version}"

}

flyway {
    url = 'jdbc:h2:file:./target/external2'
    user = 'sa'
}

jar {
    into('lib') {
        from configurations.runtime
    }
}

test {
    systemProperties = System.properties
}

task fatJar(type: Jar) {
    doFirst {
        zip64 = true
        baseName = project.name + '-all'
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        with jar
    }
   exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

task showMeCache << {
    configurations.compile.each { println it }
}

task wrapper(type: Wrapper) {
    gradleVersion = "${gradleVersion}"
}

// This is to enable test logging results when building from command line
tasks.withType(Test) {
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
    testLogging {
        // set options for log level LIFECYCLE
        events "passed", "skipped", "failed", "standardOut"
        showExceptions true
        exceptionFormat "short"
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

task activateCamelContext(type: JavaExec, dependsOn: classes) {
    description = 'This task will launch the DPERealTimeStreamingCamel context with aoplicable active routes'
    main = 'com.advisory.dpe.realtime.orchestration.camel.DPERealTimeStreamingCamelStarter'
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task sendHL7MessagesToMLLPListener(type: JavaExec, dependsOn: classes) {
    description = 'This task will launch the hl7Sender demo app which will send messages to port 10110 on localhost'
    main = 'demo.HL7_ADT.hl7Sender'
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task transformHL7IntoXMLAndJsonViaSparkStreaming(type: JavaExec, dependsOn: classes) {
    description = 'This task will launch the StreamingSparkConsumerForHl7ToXML Spark Streaming context which will poll the Kafka Topic every 2 seconds'
    main = 'com.advisory.dpe.realtime.processing.spark.StreamingSparkConsumerForHL7Data'
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}





